[
["tidyr.html", "Chapter 4 Tidy Data 4.1 Learning Objectives 4.2 Resources 4.3 Setup 4.4 Load Data 4.5 Pipes 4.6 gather() 4.7 separate() 4.8 spread() 4.9 unite() 4.10 Quiz 4.11 Exercises", " Chapter 4 Tidy Data Take the quiz to see if you need to review this chapter. 4.1 Learning Objectives 4.1.1 Basic Understand the concept of &quot;tidy data&quot; Be able to use the 4 basic tidyr verbs gather() separate() spread() unite() Be able to chain functions using pipes 4.1.2 Intermediate Be able to use arguments like sep, extra, and convert to handle less straightforward data cleaning 4.1.3 Advanced Be able to use regular expressions to separate complex columns 4.2 Resources Tidy Data Chapter 12: Tidy Data in R for Data Science Chapter 18: Pipes in R for Data Science Data wrangling cheat sheet 4.3 Setup # libraries needed library(tidyverse) library(readxl) 4.4 Load Data Get data on infant mortality rates from the CSV file infmort.csv in the directory data. infmort &lt;- read_csv(&quot;data/infmort.csv&quot;) ## Parsed with column specification: ## cols( ## Country = col_character(), ## Year = col_double(), ## `Infant mortality rate (probability of dying between birth and age 1 per 1000 live births)` = col_character() ## ) glimpse(infmort) ## Observations: 5,044 ## Variables: 3 ## $ Country &lt;chr&gt; … ## $ Year &lt;dbl&gt; … ## $ `Infant mortality rate (probability of dying between birth and age 1 per 1000 live births)` &lt;chr&gt; … Get data on maternal mortality from from the excel file matmort.xls in the directory data matmort &lt;- read_xls(&quot;data/matmort.xls&quot;) glimpse(matmort) ## Observations: 181 ## Variables: 4 ## $ Country &lt;chr&gt; &quot;Afghanistan&quot;, &quot;Albania&quot;, &quot;Algeria&quot;, &quot;Angola&quot;, &quot;Argentin… ## $ `1990` &lt;chr&gt; &quot;1 340 [ 878 - 1 950]&quot;, &quot;71 [ 58 - 88]&quot;, &quot;216 [ 141 - … ## $ `2000` &lt;chr&gt; &quot;1 100 [ 745 - 1 570]&quot;, &quot;43 [ 33 - 56]&quot;, &quot;170 [ 118 - … ## $ `2015` &lt;chr&gt; &quot;396 [ 253 - 620]&quot;, &quot;29 [ 16 - 46]&quot;, &quot;140 [ 82 - 244]… Get data on country codes from https://raw.githubusercontent.com/lukes/ISO-3166-Countries-with-Regional-Codes/master/all/all.csv ccodes &lt;- read_csv(&quot;https://raw.githubusercontent.com/lukes/ISO-3166-Countries-with-Regional-Codes/master/all/all.csv&quot;) ## Parsed with column specification: ## cols( ## name = col_character(), ## `alpha-2` = col_character(), ## `alpha-3` = col_character(), ## `country-code` = col_character(), ## `iso_3166-2` = col_character(), ## region = col_character(), ## `sub-region` = col_character(), ## `intermediate-region` = col_character(), ## `region-code` = col_character(), ## `sub-region-code` = col_character(), ## `intermediate-region-code` = col_character() ## ) glimpse(ccodes) ## Observations: 249 ## Variables: 11 ## $ name &lt;chr&gt; &quot;Afghanistan&quot;, &quot;Åland Islands&quot;, &quot;Alba… ## $ `alpha-2` &lt;chr&gt; &quot;AF&quot;, &quot;AX&quot;, &quot;AL&quot;, &quot;DZ&quot;, &quot;AS&quot;, &quot;AD&quot;, &quot;… ## $ `alpha-3` &lt;chr&gt; &quot;AFG&quot;, &quot;ALA&quot;, &quot;ALB&quot;, &quot;DZA&quot;, &quot;ASM&quot;, &quot;A… ## $ `country-code` &lt;chr&gt; &quot;004&quot;, &quot;248&quot;, &quot;008&quot;, &quot;012&quot;, &quot;016&quot;, &quot;0… ## $ `iso_3166-2` &lt;chr&gt; &quot;ISO 3166-2:AF&quot;, &quot;ISO 3166-2:AX&quot;, &quot;IS… ## $ region &lt;chr&gt; &quot;Asia&quot;, &quot;Europe&quot;, &quot;Europe&quot;, &quot;Africa&quot;,… ## $ `sub-region` &lt;chr&gt; &quot;Southern Asia&quot;, &quot;Northern Europe&quot;, &quot;… ## $ `intermediate-region` &lt;chr&gt; NA, NA, NA, NA, NA, NA, &quot;Middle Afric… ## $ `region-code` &lt;chr&gt; &quot;142&quot;, &quot;150&quot;, &quot;150&quot;, &quot;002&quot;, &quot;009&quot;, &quot;1… ## $ `sub-region-code` &lt;chr&gt; &quot;034&quot;, &quot;154&quot;, &quot;039&quot;, &quot;015&quot;, &quot;061&quot;, &quot;0… ## $ `intermediate-region-code` &lt;chr&gt; NA, NA, NA, NA, NA, NA, &quot;017&quot;, &quot;029&quot;,… 4.5 Pipes Pipes were introduced in the second lesson, but we will review them here. Pipes are a way to order your code in a more readable format. Let's say you have a small data table with 10 participant IDs, two columns with variable type A, and 2 columns with variable type B. You want to calculate the mean of the A variables and the mean of the B variables and return a table with 10 rows (1 for each participant) and 3 columns (id, A_mean and B_mean). One way you could do this is by creating a new object at every step and using that object in the next step. This is pretty clear, but you've created 6 unnecessary data objects in your environment. This can get confusing in very long scripts. # make a data table with 10 subjects data_original &lt;- tibble( id = 1:10, A1 = rnorm(10, 0), A2 = rnorm(10, 1), B1 = rnorm(10, 2), B2 = rnorm(10, 3) ) # gather columns A1 to B2 into &quot;variable&quot; and &quot;value&quot; columns data_gathered &lt;- gather(data_original, variable, value, A1:B2) # separate the variable column at the _ into &quot;var&quot; and &quot;var_n&quot; columns data_separated &lt;- separate(data_gathered, variable, c(&quot;var&quot;, &quot;var_n&quot;), sep = 1) # group the data by id and var data_grouped &lt;- group_by(data_separated, id, var) # calculate the mean value for each id/var data_summarised &lt;- summarise(data_grouped, mean = mean(value)) # spread the mean column into A and B columns data_spread &lt;- spread(data_summarised, var, mean) # rename A and B to A_mean and B_mean data &lt;- rename(data_spread, A_mean = A, B_mean = B) data ## # A tibble: 10 x 3 ## # Groups: id [10] ## id A_mean B_mean ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 0.413 2.01 ## 2 2 -0.541 2.96 ## 3 3 0.0314 1.07 ## 4 4 -0.0303 3.90 ## 5 5 0.0292 0.783 ## 6 6 0.964 2.95 ## 7 7 1.42 1.99 ## 8 8 -0.477 3.17 ## 9 9 -0.493 3.59 ## 10 10 1.25 3.34 You can name each object data and keep replacing the old data object with the new one at each step. This will keep your environment clean, but I don't recommend it because it makes it too easy to accidentally run your code out of order when you are running line-by-line for development or debugging. One way to avoid extra objects is to nest your functions, literally replacing each data object with the code that generated it in the previous step. This can be fine for very short chains. mean_petal_width &lt;- round(mean(iris$Petal.Width), 2) But it gets extremely confusing for long chains: # do not ever do this!! data &lt;- rename( spread( summarise( group_by( separate( gather( tibble( id = 1:10, A1 = rnorm(10, 0), A2 = rnorm(10, 1), B1 = rnorm(10, 2), B2 = rnorm(10,3)), variable, value, A1:B2), variable, c(&quot;var&quot;, &quot;var_n&quot;), sep = 1), id, var), mean = mean(value)), var, mean), A_mean = A, B_mean = B) The pipe lets you &quot;pipe&quot; the result of each function into the next function, allowing you to put your code in a logical order without creating too many extra objects. # calculate mean of A and B variables for each participant data &lt;- tibble( id = 1:10, A1 = rnorm(10, 0), A2 = rnorm(10, 1), B1 = rnorm(10, 2), B2 = rnorm(10,3) ) %&gt;% gather(variable, value, A1:B2) %&gt;% separate(variable, c(&quot;var&quot;, &quot;var_n&quot;), sep=1) %&gt;% group_by(id, var) %&gt;% summarise(mean = mean(value)) %&gt;% spread(var, mean) %&gt;% rename(A_mean = A, B_mean = B) You can read this code from top to bottom as follows: Make a tibble called data with id of 1 to 10, A1 of 10 random numbers from a normal distribution, A2 of 10 random numbers from a normal distribution, B1 of 10 random numbers from a normal distribution, B2 of 10 random numbers from a normal distribution; and then Gather to create variable and value column from columns A_1 to B_2; and then Separate the column variable into 2 new columns called varand var_n, separate at character 1; and then Group by columns id and var; and then Summarise and new column called mean as the mean of the value column for each group; and then Spread to make new columns with the key names in var and values in mean; and then Rename to make columns called A_mean (old A) and B_mean (old B) You can make intermediate objects whenever you need to break up your code because it's getting too complicated or you need to debug something. You can debug a pipe by highlighting from the beginning to just before the pipe you want to stop at. Try this by highlighting from data &lt;- to the end of the separate function and typing cmd-return. What does data look like now? 4.6 gather() gather(data, key = &quot;key&quot;, value = &quot;value&quot;, ..., na.rm = FALSE, convert = FALSE, factor_key = FALSE) matmort is in wide format, with a separate column for each year. Change it to long format, with a row for each County/Year observation. key is what you want to call the row headers; it's &quot;year&quot; in this example. value is what you want to call the values in the gathered columns; they're &quot;stats&quot; in this example. The ... refers to the columns you want to gather. You can refer to them by their names, like col1, col2, col3, col4 or col1:col4 or by their numbers, like 8, 9, 10 or 8:10. This example is complicated because the column names to gather are numbers. If the column names are non-standard (e.g., have spaces, start with numbers, or have special characters), you can enclose them in backticks (`) like the example below. matmort_long &lt;- matmort %&gt;% gather(&quot;Year&quot;, &quot;stats&quot;, `1990`:`2015`) glimpse(matmort_long) ## Observations: 543 ## Variables: 3 ## $ Country &lt;chr&gt; &quot;Afghanistan&quot;, &quot;Albania&quot;, &quot;Algeria&quot;, &quot;Angola&quot;, &quot;Argentin… ## $ Year &lt;chr&gt; &quot;1990&quot;, &quot;1990&quot;, &quot;1990&quot;, &quot;1990&quot;, &quot;1990&quot;, &quot;1990&quot;, &quot;1990&quot;, … ## $ stats &lt;chr&gt; &quot;1 340 [ 878 - 1 950]&quot;, &quot;71 [ 58 - 88]&quot;, &quot;216 [ 141 - … 4.7 separate() separate(data, col, into, sep = &quot;[^[:alnum:]]+&quot;, remove = TRUE, convert = FALSE, extra = &quot;warn&quot;, fill = &quot;warn&quot;) The data in the stats column is in a crazy format with some sort of confidence interval in brackets and lots of extra spaces. We don't need any of the spaces, so first we'll remove them with mutate. The separate function will separate your data on anything that is not a number or letter, so try it first without specifying the sep argument. The into argument is a list of the new column names. matmort_split &lt;- matmort_long %&gt;% mutate(stats = gsub(&quot; &quot;, &quot;&quot;, stats)) %&gt;% separate(stats, c(&quot;rate&quot;, &quot;ci_low&quot;, &quot;ci_hi&quot;)) ## Warning: Expected 3 pieces. Additional pieces discarded in 543 rows [1, 2, ## 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...]. glimpse(matmort_split) ## Observations: 543 ## Variables: 5 ## $ Country &lt;chr&gt; &quot;Afghanistan&quot;, &quot;Albania&quot;, &quot;Algeria&quot;, &quot;Angola&quot;, &quot;Argentin… ## $ Year &lt;chr&gt; &quot;1990&quot;, &quot;1990&quot;, &quot;1990&quot;, &quot;1990&quot;, &quot;1990&quot;, &quot;1990&quot;, &quot;1990&quot;, … ## $ rate &lt;chr&gt; &quot;1340&quot;, &quot;71&quot;, &quot;216&quot;, &quot;1160&quot;, &quot;72&quot;, &quot;58&quot;, &quot;8&quot;, &quot;8&quot;, &quot;64&quot;,… ## $ ci_low &lt;chr&gt; &quot;878&quot;, &quot;58&quot;, &quot;141&quot;, &quot;627&quot;, &quot;64&quot;, &quot;51&quot;, &quot;7&quot;, &quot;7&quot;, &quot;56&quot;, &quot;… ## $ ci_hi &lt;chr&gt; &quot;1950&quot;, &quot;88&quot;, &quot;327&quot;, &quot;2020&quot;, &quot;80&quot;, &quot;65&quot;, &quot;9&quot;, &quot;10&quot;, &quot;74&quot;… The gsub(pattern, replacement, x) function is a flexible way to do search and replace. The example above replaces all occurances of the pattern &quot; &quot; (a space), with the replacement &quot;&quot; (nothing), in the string x (the stats column). Use sub() instead if you only want to replace the first occurance of a pattern. We only used a simple pattern here, but you can use more complicated regex patterns to replace, for example, all even numbers (e.g., gsub(&quot;[:02468:]&quot;, &quot;&quot;, &quot;id = 123456&quot;)) or all occurances of the word colour in US or UK spelling (e.g., gsub(&quot;colo(u)?r&quot;, &quot;**&quot;, &quot;replace color, colour, or colours, but not collors&quot;)). 4.7.1 Handle spare columns with extra The previous example should have given you an error warning about &quot;Too many values at 543 locations&quot;. This is because separate splits the column at the brackets and dashes, so the text 100[90-110] would split into four values c(&quot;100&quot;, &quot;90&quot;, &quot;110&quot;, &quot;&quot;), but we only specified 3 new columns. The fourth value is always empty (just the part after the last bracket), so we are happy to drop it, but separate generates a warning so you don't do that accidentally. You can turn off the warning by adding the extra argument and setting it to &quot;drop&quot;. Look at the help for ??tidyr::separate to see what the other options do. matmort_split &lt;- matmort_long %&gt;% mutate(stats = gsub(&quot; &quot;, &quot;&quot;, stats)) %&gt;% separate(stats, c(&quot;rate&quot;, &quot;ci_low&quot;, &quot;ci_hi&quot;), extra = &quot;drop&quot;) glimpse(matmort_split) ## Observations: 543 ## Variables: 5 ## $ Country &lt;chr&gt; &quot;Afghanistan&quot;, &quot;Albania&quot;, &quot;Algeria&quot;, &quot;Angola&quot;, &quot;Argentin… ## $ Year &lt;chr&gt; &quot;1990&quot;, &quot;1990&quot;, &quot;1990&quot;, &quot;1990&quot;, &quot;1990&quot;, &quot;1990&quot;, &quot;1990&quot;, … ## $ rate &lt;chr&gt; &quot;1340&quot;, &quot;71&quot;, &quot;216&quot;, &quot;1160&quot;, &quot;72&quot;, &quot;58&quot;, &quot;8&quot;, &quot;8&quot;, &quot;64&quot;,… ## $ ci_low &lt;chr&gt; &quot;878&quot;, &quot;58&quot;, &quot;141&quot;, &quot;627&quot;, &quot;64&quot;, &quot;51&quot;, &quot;7&quot;, &quot;7&quot;, &quot;56&quot;, &quot;… ## $ ci_hi &lt;chr&gt; &quot;1950&quot;, &quot;88&quot;, &quot;327&quot;, &quot;2020&quot;, &quot;80&quot;, &quot;65&quot;, &quot;9&quot;, &quot;10&quot;, &quot;74&quot;… 4.7.2 Set delimiters with sep Now do the same with infmort. It's already in long format, so you don't need to use gather, but the third column has a crazy long name, so we can just refer to it by its column number (3). infmort_split &lt;- infmort %&gt;% separate(3, c(&quot;rate&quot;, &quot;ci_low&quot;, &quot;ci_hi&quot;), extra = &quot;drop&quot;) glimpse(infmort_split) ## Observations: 5,044 ## Variables: 5 ## $ Country &lt;chr&gt; &quot;Afghanistan&quot;, &quot;Afghanistan&quot;, &quot;Afghanistan&quot;, &quot;Afghanista… ## $ Year &lt;dbl&gt; 2015, 2014, 2013, 2012, 2011, 2010, 2009, 2008, 2007, 20… ## $ rate &lt;chr&gt; &quot;66&quot;, &quot;68&quot;, &quot;69&quot;, &quot;71&quot;, &quot;73&quot;, &quot;75&quot;, &quot;76&quot;, &quot;78&quot;, &quot;80&quot;, &quot;8… ## $ ci_low &lt;chr&gt; &quot;3&quot;, &quot;1&quot;, &quot;9&quot;, &quot;7&quot;, &quot;4&quot;, &quot;1&quot;, &quot;8&quot;, &quot;6&quot;, &quot;4&quot;, &quot;3&quot;, &quot;4&quot;, &quot;… ## $ ci_hi &lt;chr&gt; &quot;52&quot;, &quot;55&quot;, &quot;58&quot;, &quot;61&quot;, &quot;64&quot;, &quot;66&quot;, &quot;69&quot;, &quot;71&quot;, &quot;73&quot;, &quot;7… Wait, that didn't work at all! It split the column on spaces, brackets, and full stops. We just want to split on the spaces, brackets and dashes. So we need to manually set sep to what the delimiters are. Also, once there are more than a few arguments specified for a function, it's easier to read them if you put one argument on each line. {#regex} You can use regular expressions to separate complex columns. Here, we want to separate on dashes and brackets. You can separate on a list of delimiters by putting them in parentheses, separated by &quot;|&quot;. It's a little more complicated because brackets have a special meaning in regex, so you need to &quot;escape&quot; the left one with two backslashes &quot;\\&quot;. infmort_split &lt;- infmort %&gt;% separate( col = 3, into = c(&quot;rate&quot;, &quot;ci_low&quot;, &quot;ci_hi&quot;), extra = &quot;drop&quot;, sep = &quot;(\\\\[|-|])&quot; ) glimpse(infmort_split) ## Observations: 5,044 ## Variables: 5 ## $ Country &lt;chr&gt; &quot;Afghanistan&quot;, &quot;Afghanistan&quot;, &quot;Afghanistan&quot;, &quot;Afghanista… ## $ Year &lt;dbl&gt; 2015, 2014, 2013, 2012, 2011, 2010, 2009, 2008, 2007, 20… ## $ rate &lt;chr&gt; &quot;66.3 &quot;, &quot;68.1 &quot;, &quot;69.9 &quot;, &quot;71.7 &quot;, &quot;73.4 &quot;, &quot;75.1 &quot;, &quot;7… ## $ ci_low &lt;chr&gt; &quot;52.7&quot;, &quot;55.7&quot;, &quot;58.7&quot;, &quot;61.6&quot;, &quot;64.4&quot;, &quot;66.9&quot;, &quot;69.0&quot;, … ## $ ci_hi &lt;chr&gt; &quot;83.9&quot;, &quot;83.6&quot;, &quot;83.5&quot;, &quot;83.7&quot;, &quot;84.2&quot;, &quot;85.1&quot;, &quot;86.1&quot;, … 4.7.3 Fix data types with convert That's better. Notice the next to Year, rate, ci_low and ci_hi. That means these columns hold characters (like words), not numbers or integers. This can cause problems when you try to do thigs like average the numbers (you can't average words), so we can fix it by adding the argument convert and setting it to TRUE. infmort_split &lt;- infmort %&gt;% separate(3, c(&quot;rate&quot;, &quot;ci_low&quot;, &quot;ci_hi&quot;), extra = &quot;drop&quot;, sep = &quot;(\\\\[|-|])&quot;, convert = TRUE) glimpse(infmort_split) ## Observations: 5,044 ## Variables: 5 ## $ Country &lt;chr&gt; &quot;Afghanistan&quot;, &quot;Afghanistan&quot;, &quot;Afghanistan&quot;, &quot;Afghanista… ## $ Year &lt;dbl&gt; 2015, 2014, 2013, 2012, 2011, 2010, 2009, 2008, 2007, 20… ## $ rate &lt;dbl&gt; 66.3, 68.1, 69.9, 71.7, 73.4, 75.1, 76.8, 78.6, 80.4, 82… ## $ ci_low &lt;dbl&gt; 52.7, 55.7, 58.7, 61.6, 64.4, 66.9, 69.0, 71.2, 73.4, 75… ## $ ci_hi &lt;dbl&gt; 83.9, 83.6, 83.5, 83.7, 84.2, 85.1, 86.1, 87.3, 88.9, 90… Do the same for matmort. matmort_split &lt;- matmort_long %&gt;% mutate(stats = gsub(&quot; &quot;, &quot;&quot;, stats)) %&gt;% separate(stats, c(&quot;rate&quot;, &quot;ci_low&quot;, &quot;ci_hi&quot;), extra = &quot;drop&quot;, convert = TRUE) glimpse(matmort_split) ## Observations: 543 ## Variables: 5 ## $ Country &lt;chr&gt; &quot;Afghanistan&quot;, &quot;Albania&quot;, &quot;Algeria&quot;, &quot;Angola&quot;, &quot;Argentin… ## $ Year &lt;chr&gt; &quot;1990&quot;, &quot;1990&quot;, &quot;1990&quot;, &quot;1990&quot;, &quot;1990&quot;, &quot;1990&quot;, &quot;1990&quot;, … ## $ rate &lt;int&gt; 1340, 71, 216, 1160, 72, 58, 8, 8, 64, 46, 26, 569, 58, … ## $ ci_low &lt;int&gt; 878, 58, 141, 627, 64, 51, 7, 7, 56, 34, 20, 446, 47, 28… ## $ ci_hi &lt;int&gt; 1950, 88, 327, 2020, 80, 65, 9, 10, 74, 61, 33, 715, 72,… 4.7.4 All in one step We can chain all the steps above together, since we don't need those intermediate dataframes. infmort &lt;- read_csv(&quot;data/infmort.csv&quot;) %&gt;% separate( 3, c(&quot;rate&quot;, &quot;ci_low&quot;, &quot;ci_hi&quot;), extra = &quot;drop&quot;, sep = &quot;(\\\\[|-|])&quot;, convert = TRUE ) ## Parsed with column specification: ## cols( ## Country = col_character(), ## Year = col_double(), ## `Infant mortality rate (probability of dying between birth and age 1 per 1000 live births)` = col_character() ## ) matmort &lt;- read_xls(&quot;data/matmort.xls&quot;) %&gt;% gather(&quot;Year&quot;, &quot;stats&quot;, `1990`:`2015`) %&gt;% mutate(stats = gsub(&quot; &quot;, &quot;&quot;, stats)) %&gt;% separate( stats, c(&quot;rate&quot;, &quot;ci_low&quot;, &quot;ci_hi&quot;), extra = &quot;drop&quot;, convert = TRUE ) glimpse(matmort) glimpse(infmort) ## Observations: 543 ## Variables: 5 ## $ Country &lt;chr&gt; &quot;Afghanistan&quot;, &quot;Albania&quot;, &quot;Algeria&quot;, &quot;Angola&quot;, &quot;Argentin… ## $ Year &lt;chr&gt; &quot;1990&quot;, &quot;1990&quot;, &quot;1990&quot;, &quot;1990&quot;, &quot;1990&quot;, &quot;1990&quot;, &quot;1990&quot;, … ## $ rate &lt;int&gt; 1340, 71, 216, 1160, 72, 58, 8, 8, 64, 46, 26, 569, 58, … ## $ ci_low &lt;int&gt; 878, 58, 141, 627, 64, 51, 7, 7, 56, 34, 20, 446, 47, 28… ## $ ci_hi &lt;int&gt; 1950, 88, 327, 2020, 80, 65, 9, 10, 74, 61, 33, 715, 72,… ## Observations: 5,044 ## Variables: 5 ## $ Country &lt;chr&gt; &quot;Afghanistan&quot;, &quot;Afghanistan&quot;, &quot;Afghanistan&quot;, &quot;Afghanista… ## $ Year &lt;dbl&gt; 2015, 2014, 2013, 2012, 2011, 2010, 2009, 2008, 2007, 20… ## $ rate &lt;dbl&gt; 66.3, 68.1, 69.9, 71.7, 73.4, 75.1, 76.8, 78.6, 80.4, 82… ## $ ci_low &lt;dbl&gt; 52.7, 55.7, 58.7, 61.6, 64.4, 66.9, 69.0, 71.2, 73.4, 75… ## $ ci_hi &lt;dbl&gt; 83.9, 83.6, 83.5, 83.7, 84.2, 85.1, 86.1, 87.3, 88.9, 90… 4.8 spread() spread(data, key, value, fill = NA, convert = FALSE, drop = TRUE, sep = NULL) You can reverse the processes above, as well. For example, you can convert data from long format into wide format. key is the column that contains your new column headers value is the column that contains the values in the new spread columns Let's spread out the infant mortality rate by year. infmort_wide &lt;- infmort %&gt;% spread(Year, rate) glimpse(infmort_wide) ## Observations: 4,934 ## Variables: 29 ## $ Country &lt;chr&gt; &quot;Afghanistan&quot;, &quot;Afghanistan&quot;, &quot;Afghanistan&quot;, &quot;Afghanista… ## $ ci_low &lt;dbl&gt; 52.7, 55.7, 58.7, 61.6, 64.4, 66.9, 69.0, 71.2, 73.4, 75… ## $ ci_hi &lt;dbl&gt; 83.9, 83.6, 83.5, 83.7, 84.2, 85.1, 86.1, 87.3, 88.9, 90… ## $ `1990` &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ `1991` &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ `1992` &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ `1993` &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ `1994` &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ `1995` &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ `1996` &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ `1997` &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ `1998` &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ `1999` &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ `2000` &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ `2001` &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ `2002` &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 91.2… ## $ `2003` &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 89, NA, … ## $ `2004` &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 86.7, NA, NA… ## $ `2005` &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 84.4, NA, NA, NA… ## $ `2006` &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, 82.3, NA, NA, NA, NA… ## $ `2007` &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, 80.4, NA, NA, NA, NA, NA… ## $ `2008` &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, 78.6, NA, NA, NA, NA, NA, NA… ## $ `2009` &lt;dbl&gt; NA, NA, NA, NA, NA, NA, 76.8, NA, NA, NA, NA, NA, NA, NA… ## $ `2010` &lt;dbl&gt; NA, NA, NA, NA, NA, 75.1, NA, NA, NA, NA, NA, NA, NA, NA… ## $ `2011` &lt;dbl&gt; NA, NA, NA, NA, 73.4, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ `2012` &lt;dbl&gt; NA, NA, NA, 71.7, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ `2013` &lt;dbl&gt; NA, NA, 69.9, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ `2014` &lt;dbl&gt; NA, 68.1, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ `2015` &lt;dbl&gt; 66.3, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… Nope, that didn't work at all, but it's a really common mistake when spreading data. This is because spread matches on all the remaining columns, so Afghanistan with ci_low of 52.7 is treated as a different observation than Afghanistan with ci_low of 55.7. We can fix this by merging the rate, ci_low and ci_hi columns back together. 4.9 unite() unite(data, col, ..., sep = &quot;_&quot;, remove = TRUE) infmort_united &lt;- infmort %&gt;% unite(rate_ci, rate, ci_low, ci_hi) glimpse(infmort_united) ## Observations: 5,044 ## Variables: 3 ## $ Country &lt;chr&gt; &quot;Afghanistan&quot;, &quot;Afghanistan&quot;, &quot;Afghanistan&quot;, &quot;Afghanista… ## $ Year &lt;dbl&gt; 2015, 2014, 2013, 2012, 2011, 2010, 2009, 2008, 2007, 20… ## $ rate_ci &lt;chr&gt; &quot;66.3_52.7_83.9&quot;, &quot;68.1_55.7_83.6&quot;, &quot;69.9_58.7_83.5&quot;, &quot;7… 4.9.1 Control separation with sep unite() separates merged names with an underscore by default. Set the sep argument if you want to change that. infmort_united &lt;- infmort %&gt;% unite(rate_ci, rate, ci_low, ci_hi, sep = &quot;, &quot;) glimpse(infmort_united) ## Observations: 5,044 ## Variables: 3 ## $ Country &lt;chr&gt; &quot;Afghanistan&quot;, &quot;Afghanistan&quot;, &quot;Afghanistan&quot;, &quot;Afghanista… ## $ Year &lt;dbl&gt; 2015, 2014, 2013, 2012, 2011, 2010, 2009, 2008, 2007, 20… ## $ rate_ci &lt;chr&gt; &quot;66.3, 52.7, 83.9&quot;, &quot;68.1, 55.7, 83.6&quot;, &quot;69.9, 58.7, 83.… What if you want to put it back into the format &quot;rate [ci_low - ci_hi]&quot;? Then, mutate and paste are a better choice than unite, but you have to get rid of the rate, ci_low and ci_hi columns with select. You'll learn more about these function in the Data Manipulation lesson. infmort_united &lt;- infmort %&gt;% mutate(rate_ci = paste0(rate, &quot; [&quot;, ci_low, &quot; - &quot;, ci_hi, &quot;]&quot;)) glimpse(infmort_united) ## Observations: 5,044 ## Variables: 6 ## $ Country &lt;chr&gt; &quot;Afghanistan&quot;, &quot;Afghanistan&quot;, &quot;Afghanistan&quot;, &quot;Afghanista… ## $ Year &lt;dbl&gt; 2015, 2014, 2013, 2012, 2011, 2010, 2009, 2008, 2007, 20… ## $ rate &lt;dbl&gt; 66.3, 68.1, 69.9, 71.7, 73.4, 75.1, 76.8, 78.6, 80.4, 82… ## $ ci_low &lt;dbl&gt; 52.7, 55.7, 58.7, 61.6, 64.4, 66.9, 69.0, 71.2, 73.4, 75… ## $ ci_hi &lt;dbl&gt; 83.9, 83.6, 83.5, 83.7, 84.2, 85.1, 86.1, 87.3, 88.9, 90… ## $ rate_ci &lt;chr&gt; &quot;66.3 [52.7 - 83.9]&quot;, &quot;68.1 [55.7 - 83.6]&quot;, &quot;69.9 [58.7 … Now let's try spreading on year again. Notice here we're uniting columns rate:ci_hi, instead of rate, ci_low, ci_hi. The colon just says to select all the columns between the first and last named ones. Check the help documentation for ??tidyr::unite and ??tidyr::select to see other ways to select columns. infmort_wide &lt;- infmort %&gt;% unite(rate_ci, rate:ci_hi, sep = &quot;, &quot;) %&gt;% spread(Year, rate_ci) glimpse(infmort_wide) ## Observations: 194 ## Variables: 27 ## $ Country &lt;chr&gt; &quot;Afghanistan&quot;, &quot;Albania&quot;, &quot;Algeria&quot;, &quot;Andorra&quot;, &quot;Angola&quot;… ## $ `1990` &lt;chr&gt; &quot;122.5, 111.6, 135.5&quot;, &quot;35.1, 31.3, 39.2&quot;, &quot;39.7, 37.1, … ## $ `1991` &lt;chr&gt; &quot;118.3, 108, 129.9&quot;, &quot;33.7, 30.2, 37.6&quot;, &quot;38.8, 36.1, 41… ## $ `1992` &lt;chr&gt; &quot;114.4, 104.6, 125.2&quot;, &quot;32.5, 29.2, 36.2&quot;, &quot;38.1, 35.4, … ## $ `1993` &lt;chr&gt; &quot;110.9, 101.4, 120.9&quot;, &quot;31.4, 28.2, 34.9&quot;, &quot;37.5, 34.9, … ## $ `1994` &lt;chr&gt; &quot;107.7, 98.6, 117.2&quot;, &quot;30.3, 27.1, 33.8&quot;, &quot;36.9, 34.6, 3… ## $ `1995` &lt;chr&gt; &quot;105, 96.2, 114.1&quot;, &quot;29.1, 26, 32.7&quot;, &quot;36.3, 34.2, 38.4&quot;… ## $ `1996` &lt;chr&gt; &quot;102.7, 94.5, 111.3&quot;, &quot;27.9, 24.8, 31.5&quot;, &quot;35.7, 34, 37.… ## $ `1997` &lt;chr&gt; &quot;100.7, 92.9, 109.1&quot;, &quot;26.8, 23.6, 30.4&quot;, &quot;35.1, 33.8, 3… ## $ `1998` &lt;chr&gt; &quot;98.9, 91.4, 107.2&quot;, &quot;25.5, 22.4, 29.2&quot;, &quot;34.7, 33.7, 35… ## $ `1999` &lt;chr&gt; &quot;97.2, 89.9, 105.4&quot;, &quot;24.4, 21.2, 28.1&quot;, &quot;34.4, 33.5, 35… ## $ `2000` &lt;chr&gt; &quot;95.4, 88.2, 103.6&quot;, &quot;23.2, 20, 27&quot;, &quot;33.9, 33.2, 34.7&quot;,… ## $ `2001` &lt;chr&gt; &quot;93.4, 86.3, 101.6&quot;, &quot;22.1, 18.8, 26&quot;, &quot;33.3, 32.7, 34&quot;,… ## $ `2002` &lt;chr&gt; &quot;91.2, 84.3, 99.3&quot;, &quot;21, 17.6, 25.1&quot;, &quot;32.4, 31.8, 33&quot;, … ## $ `2003` &lt;chr&gt; &quot;89, 82.1, 97&quot;, &quot;20, 16.5, 24.3&quot;, &quot;31.3, 30.7, 31.9&quot;, &quot;3… ## $ `2004` &lt;chr&gt; &quot;86.7, 79.9, 94.8&quot;, &quot;19.1, 15.4, 23.8&quot;, &quot;30.1, 29.5, 30.… ## $ `2005` &lt;chr&gt; &quot;84.4, 77.7, 92.6&quot;, &quot;18.3, 14.2, 23.4&quot;, &quot;28.8, 28.3, 29.… ## $ `2006` &lt;chr&gt; &quot;82.3, 75.5, 90.7&quot;, &quot;17.4, 13.2, 23.1&quot;, &quot;27.6, 27, 28.1&quot;… ## $ `2007` &lt;chr&gt; &quot;80.4, 73.4, 88.9&quot;, &quot;16.7, 12.1, 22.9&quot;, &quot;26.4, 25.9, 26.… ## $ `2008` &lt;chr&gt; &quot;78.6, 71.2, 87.3&quot;, &quot;16, 11.2, 22.7&quot;, &quot;25.3, 24.8, 25.7&quot;… ## $ `2009` &lt;chr&gt; &quot;76.8, 69, 86.1&quot;, &quot;15.4, 10.5, 22.6&quot;, &quot;24.3, 23.8, 24.7&quot;… ## $ `2010` &lt;chr&gt; &quot;75.1, 66.9, 85.1&quot;, &quot;14.8, 9.8, 22.4&quot;, &quot;23.5, 23, 23.9&quot;,… ## $ `2011` &lt;chr&gt; &quot;73.4, 64.4, 84.2&quot;, &quot;14.3, 9.1, 22.3&quot;, &quot;22.8, 22.4, 23.3… ## $ `2012` &lt;chr&gt; &quot;71.7, 61.6, 83.7&quot;, &quot;13.8, 8.5, 22.2&quot;, &quot;22.4, 22, 22.9&quot;,… ## $ `2013` &lt;chr&gt; &quot;69.9, 58.7, 83.5&quot;, &quot;13.3, 7.9, 22.1&quot;, &quot;22.1, 21.7, 22.7… ## $ `2014` &lt;chr&gt; &quot;68.1, 55.7, 83.6&quot;, &quot;12.9, 7.5, 22.1&quot;, &quot;22, 21.3, 22.7&quot;,… ## $ `2015` &lt;chr&gt; &quot;66.3, 52.7, 83.9&quot;, &quot;12.5, 7, 22.2&quot;, &quot;21.9, 20.8, 23&quot;, &quot;… 4.10 Quiz The following data table is called quiz_data. id condition version pet score 1 A 1 cat 0.270 1 A 2 cat 0.700 1 B 1 cat 0.071 1 B 2 cat -0.434 2 A 1 dog 0.149 2 A 2 dog -0.005 2 B 1 dog 0.661 2 B 2 dog -0.435 How do you get quiz_data into the following format? id version pet A B 1 1 cat 0.2701895 0.0707570 1 2 cat 0.6999757 -0.4343429 2 1 dog 0.1489246 0.6609718 2 2 dog -0.0049055 -0.4352644 separate(quiz_data, condition, score) gather(quiz_data, condition:score) spread(quiz_data, condition, score) unite(quiz_data, condition:score) How do you get quiz_data into the following format? id cversion pet score 1 A_1 cat 0.2701895 1 A_2 cat 0.6999757 1 B_1 cat 0.0707570 1 B_2 cat -0.4343429 2 A_1 dog 0.1489246 2 A_2 dog -0.0049055 2 B_1 dog 0.6609718 2 B_2 dog -0.4352644 separate(quiz_data, cversion, condition, version) spread(quiz_data, condition:version) gather(quiz_data, cversion, condition:version) unite(quiz_data, cversion, condition, version) Put the built-in dataset iris into the following format. Species feature dimension value setosa Sepal Length 5.1 setosa Sepal Length 4.9 setosa Sepal Length 4.7 setosa Sepal Length 4.6 setosa Sepal Length 5.0 setosa Sepal Length 5.4 Solution iris %&gt;% gather(var, value, Sepal.Length:Petal.Width) %&gt;% separate(var, into = c(&quot;feature&quot;, &quot;dimension&quot;)) Re-write the following code using pipes. Assign the resulting data table to a variable called data. # make a data table with 5 subjects providing 2 scores (A and B) in each of 2 conditions data_original &lt;- tibble( id = c(1:5, 1:5), condition = rep(1:2, each = 5), A = rnorm(10), B = rnorm(10) ) # gather columns A and B into &quot;score_type&quot; and &quot;score&quot; columns data_gathered &lt;- gather(data_original, score_type, score, A:B) # unite the score_type and condition columns into a column called &quot;cell&quot; data_united &lt;- unite(data_gathered, cell, score_type, condition, sep = &quot;&quot;) # spread the score column into cells data_spread &lt;- spread(data_united, cell, score) Solution data &lt;- tibble( id = c(1:5, 1:5), condition = rep(1:2, each = 5), A = rnorm(10), B = rnorm(10) ) %&gt;% gather(score_type, score, A:B) %&gt;% unite(cell, score_type, condition, sep = &quot;&quot;) %&gt;% spread(cell, score) 4.11 Exercises Download the formative exercises. See the answers only after you've attempted all the questions. Tidy the data from personality.csv. These data are from a 5-factor (OCEAN) personality questionnaire. Each question is labelled with the domain (Op = openness, Co = concientiousness, Ex = extraversion, Ag = agreeableness, and Ne = neuroticism) and the question number. Basic: Load the data and convert from wide to long format. The resulting dataframe should have the columns: user_id, date, question, and score. Basic: Split the question column into two columns: domain and qnumber. There is no character to split on, here, but you can separate a column after a specific number of characters by setting sep to an integer. For example, to split &quot;abcde&quot; after the third character, use sep = 3, which results in c(&quot;abc&quot;, &quot;de&quot;). You can also use negative number to split before the nth character from the right. For example, to split a column that has words of various lengths and 2-digit suffixes (like &quot;lisa03&quot;&quot;, &quot;amanda38&quot;), you can use sep = -2. Basic: Put the domain and qnumber columns back together into a new column named domain_n. Make it in a format like &quot;Op_Q1&quot;. Basic: Convert back to wide format. Intermediate: Chain all the steps above using pipes. Intermediate: Debug the following code: Load the data from sensation_seeking.csv. ss &lt;- read_csv(data/sensation_seeking.csv) Convert from wide to long format. ss_long &lt;- gather(ss, &quot;question&quot;, &quot;score&quot;) Split the question column into two columns: domain and qnumber. ss_sep &lt;- ss_long %&gt;% separate(question, domain, qnumber, sep = 3) Put the id and user_id columns together into a new column named super_id. Make it in a format like &quot;id-user_id&quot;. ss_unite &lt;- ss_sep %&gt;% unite(id, user_id, &quot;super_id&quot;, sep = &quot;-&quot;) Convert back to wide format. ss_wide &lt;- ss_unite %&gt;% spreadr(qnumber, score) Intermediate: Load the dataset family_composition.csv. The columns oldbro through twinsis give the number of siblings of that age and sex. Put this into long format and create separate columns for sibling age (old, young, twin) and sex (bro, sis). Advanced: Tidy the data from eye_descriptions.csv. This dataset contains descriptions of the eyes of 50 people. Some raters wrote more than one description per face, separated by commas, semicolons, or slashes. Create a dataset with separate columns for face_id, description, and number of description. I'm bored Using the family composition dataset from question 11, calculate how many siblings of each sex each person has, narrow the dataset down to people with fewer than 6 siblings, and generate at least two different ways to graph this. Create a list of the 10 most common descriptions from the eye colour dataset in question 12. Remove useless descriptions and merge redundant descriptions. Display the table by piping the resulting tibble to knitr::kable(). "]
]
