[
["ggplot.html", "Chapter 3 Data Visualisation 3.1 Learning Objectives 3.2 Resources 3.3 Setup 3.4 Common Variable Combinations 3.5 Data 3.6 Basic Plots 3.7 Save as File 3.8 Combination Plots 3.9 Overlapping Data 3.10 Heat map 3.11 Interactive Plots 3.12 Quiz 3.13 Exercises", " Chapter 3 Data Visualisation Take the quiz to see if you need to review this chapter. 3.1 Learning Objectives 3.1.1 Basic Understand what types of graphs are best for different types of data 1 discrete 1 continuous 2 discrete 2 continuous 1 discrete, 1 continuous 3 continuous Create common types of graphs with ggplot2 geom_bar() geom_density() geom_freqpoly() geom_histogram() geom_violin() geom_boxplot() geom_col() geom_point() geom_smooth() Set custom labels Represent factorial designs with different colours or facets Save plots as an image file 3.1.2 Intermediate Superimpose different types of graphs Add lines to graphs Deal with overlapping data Create less common types of graphs geom_tile() geom_density2d() geom_bin2d() geom_hex() geom_count() Use the viridis package to set colours 3.1.3 Advanced Arrange plots in a grid using cowplot Adjust axes (e.g., flip coordinates, set axis limits) Change the theme Create interactive graphs with plotly 3.2 Resources Look at Data from Data Vizualization for Social Science Chapter 3: Data Visualisation of R for Data Science Chapter 28: Graphics for communication of R for Data Science ggplot2 cheat sheet ggplot2 documentation The R Graph Gallery (this is really useful) Top 50 ggplot2 Visualizations R Graphics Cookbook by Winston Chang The viridis color palettes ggplot extensions plotly for creating interactive graphs 3.3 Setup # libraries needed for these graphs library(tidyverse) library(viridis) library(plotly) # cowplot will change the default theme of graphs, so we&#39;re loading it later # library(cowplot) 3.4 Common Variable Combinations 1 discrete 1 continuous 2 discrete 2 continuous 1 discrete, 1 continuous 3 continuous Before you read ahead, come up with an example of each type of variable combination and sketch the types of graphs that would best display these data. 3.5 Data Here we've created some data frames with different types of data. pets has a column with pet type pet_happy has happiness and age for 500 dog owners and 500 cat owners x_vs_y has two correlated continuous variables (x and y) overlap has two correlated ordinal variables and 1000 observations so there is a lot of overlap overplot has two correlated continuous variables and 10000 observations pets &lt;- tibble( pet = sample( c(&quot;dog&quot;, &quot;cat&quot;, &quot;ferret&quot;, &quot;bird&quot;, &quot;fish&quot;), 100, TRUE, c(0.45, 0.40, 0.05, 0.05, 0.05) ) ) pet_happy &lt;- tibble( pet = rep(c(&quot;dog&quot;, &quot;cat&quot;), each = 500), happiness = c(rnorm(500, 55, 10), rnorm(500, 45, 10)), age = rpois(1000, 3) + 20 ) x_vs_y &lt;- tibble( x = rnorm(100), y = x + rnorm(100, 0, 0.5) ) overlap &lt;- tibble( x = rbinom(1000, 10, 0.5), y = x + rbinom(1000, 20, 0.5) ) overplot &lt;- tibble( x = rnorm(10000), y = x + rnorm(10000, 0, 0.5) ) First, think about what kinds of graphs are best for representing these different types of data. 3.6 Basic Plots 3.6.1 Bar plot Bar plots are good for categorical data where you want to represent the count. ggplot(pets, aes(pet)) + geom_bar() Figure 3.1: Bar plot 3.6.2 Density plot Density plots are good for one continuous variable, but only if you have a fairly large number of observations. ggplot(pet_happy, aes(happiness)) + geom_density() Figure 3.2: Density plot You can represent subsets of a variable by assigning the category variable to the argument group, fill, or color. ggplot(pet_happy, aes(happiness, fill = pet)) + geom_density(alpha = 0.5) Figure 3.3: Grouped density plot Try changing the alpha argument to figure out what it does. 3.6.3 Frequency Polygons If you don't want smoothed distributions, try geom_freqpoly(). ggplot(pet_happy, aes(happiness, color = pet)) + geom_freqpoly(binwidth = 1) Figure 3.4: Frequency ploygon plot Try changing the binwidth argument to 5 and 0.1. How do you figure out the right value? 3.6.4 Histogram Histograms are also good for one continuous variable, and work well if you don't have many observations. Set the binwidth to control how wide each bar is. ggplot(pet_happy, aes(happiness)) + geom_histogram(binwidth = 1, fill = &quot;white&quot;, color = &quot;black&quot;) Figure 3.5: Histogram Histograms in ggplot look pretty bad unless you set the fill and color. If you show grouped histograms, you also probably want to change the default position argument. ggplot(pet_happy, aes(happiness, fill=pet)) + geom_histogram(binwidth = 1, alpha = 0.5, position = &quot;dodge&quot;) Figure 3.6: Grouped Histogram Try changing the position argument to &quot;identity&quot;, &quot;fill&quot;, &quot;dodge&quot;, or &quot;stack&quot;. 3.6.5 Column plot Column plots are the worst way to represent grouped continuous data, but also one of the most common. To make column plots with error bars, you first need to calculate the means, error bar uper limits (ymax) and error bar lower limits (ymin) for each category. You'll learn more about how to use the code below in the next two lessons. # calculate mean and SD for each pet pet_happy %&gt;% group_by(pet) %&gt;% summarise( mean = mean(happiness), sd = sd(happiness) ) %&gt;% ggplot(aes(pet, mean, fill=pet)) + geom_col(alpha = 0.5) + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.25) + geom_hline(yintercept = 40) Figure 3.7: Column plot What do you think geom_hline() does? 3.6.6 Boxplot Boxplots are great for representing the distribution of grouped continuous variables. They fix most of the problems with using barplots for continuous data. ggplot(pet_happy, aes(pet, happiness, fill=pet)) + geom_boxplot(alpha = 0.5) Figure 3.8: Box plot 3.6.7 Violin plot Violin pots are like sideways, mirrored density plots. They give even more information than a boxplot about distribution and are especially useful when you have non-normal distributions. ggplot(pet_happy, aes(pet, happiness, fill=pet)) + geom_violin( trim = FALSE, draw_quantiles = c(0.25, 0.5, 0.75), alpha = 0.5 ) Figure 3.9: Violin plot Try changing the numbers in the draw_quantiles argument. 3.6.8 Scatter plot Scatter plots are a good way to represent the relationship between two continuous variables. ggplot(x_vs_y, aes(x, y)) + geom_point() Figure 3.10: Scatter plot using geom_point() 3.6.9 Line graph You often want to represent the relationship as a single line. ggplot(x_vs_y, aes(x, y)) + geom_smooth(method=&quot;lm&quot;) Figure 3.11: Line plot using geom_smooth() 3.7 Save as File You can save a ggplot using ggsave(). It saves the last ggplot you made, by default, but you can specify which plot you want to save if you assigned that plot to a variable. You can set the width and height of your plot. The default units are inches, but you can change the units argument to &quot;in&quot;, &quot;cm&quot;, or &quot;mm&quot;. box &lt;- ggplot(pet_happy, aes(pet, happiness, fill=pet)) + geom_boxplot(alpha = 0.5) violin &lt;- ggplot(pet_happy, aes(pet, happiness, fill=pet)) + geom_violin(alpha = 0.5) ggsave(&quot;demog_violin_plot.png&quot;, width = 5, height = 7) ggsave(&quot;demog_box_plot.jpg&quot;, plot = box, width = 5, height = 7) 3.8 Combination Plots 3.8.1 Violinbox plot To demonstrate the use of facet_grid() for factorial designs, we create a new column called agegroup to split the data into participants older than the meadian age or younger than the median age. New factors will display in alphabetical order, so we can use the factor() function to set the levels in the order we want. pet_happy %&gt;% mutate(agegroup = ifelse(age&lt;median(age), &quot;Younger&quot;, &quot;Older&quot;), agegroup = factor(agegroup, levels = c(&quot;Younger&quot;, &quot;Older&quot;))) %&gt;% ggplot(aes(pet, happiness, fill=pet)) + geom_violin(trim = FALSE, alpha=0.5, show.legend = FALSE) + geom_boxplot(width = 0.25, fill=&quot;white&quot;) + facet_grid(.~agegroup) + scale_fill_manual(values = c(&quot;orange&quot;, &quot;green&quot;)) Figure 3.12: Violin-box plot Set the show.legend argument to FALSE to hide the legend. We do this here because the x-axis already labels the pet types. 3.8.2 Violin-point-range plot You can use stat_summary() to superimpose a point-range plot showning the mean Â± 1 SD. You'll learn how to write your own functions in the lesson on Iteration and Functions. ggplot(pet_happy, aes(pet, happiness, fill=pet)) + geom_violin( trim = FALSE, alpha = 0.5 ) + stat_summary( fun.y = mean, fun.ymax = function(x) {mean(x) + sd(x)}, fun.ymin = function(x) {mean(x) - sd(x)}, geom=&quot;pointrange&quot; ) Figure 3.13: Point-range plot using stat_summary() 3.8.3 Violin-jitter plot If you don't have a lot of data points, it's good to represent them individually. You can use geom_point to do this, setting position to &quot;jitter&quot;. pet_happy %&gt;% sample_n(50) %&gt;% # choose 50 random observations from the dataset ggplot(aes(pet, happiness, fill=pet)) + geom_violin( trim = FALSE, draw_quantiles = c(0.25, 0.5, 0.75), alpha = 0.5 ) + geom_point(position = &quot;jitter&quot;, alpha = 0.7, size = 3) Figure 3.14: Violin-jitter plot 3.8.4 Scatter-line graph If your graph isn't too complicated, it's good to also show the individual data points behind the line. ggplot(x_vs_y, aes(x, y)) + geom_point(alpha = 0.25) + geom_smooth(method=&quot;lm&quot;) (#fig:scatter_line)Scatter-line plot 3.8.5 Grid of plots You can use the cowplot package to easily make grids of different graphs. First, you have to assign each plot a name. Then you list all the plots as the first arguments of plot_grid() and provide a list of labels. library(cowplot) my_hist &lt;- ggplot(pet_happy, aes(happiness, fill=pet)) + geom_histogram( binwidth = 1, alpha = 0.5, position = &quot;dodge&quot;, show.legend = FALSE ) my_violin &lt;- ggplot(pet_happy, aes(pet, happiness, fill=pet)) + geom_violin( trim = FALSE, draw_quantiles = c(0.5), alpha = 0.5, show.legend = FALSE ) my_box &lt;- ggplot(pet_happy, aes(pet, happiness, fill=pet)) + geom_boxplot(alpha=0.5, show.legend = FALSE) my_density &lt;- ggplot(pet_happy, aes(happiness, fill=pet)) + geom_density(alpha=0.5, show.legend = FALSE) my_bar &lt;- pet_happy %&gt;% group_by(pet) %&gt;% summarise( mean = mean(happiness), sd = sd(happiness) ) %&gt;% ggplot(aes(pet, mean, fill=pet)) + geom_bar(stat=&quot;identity&quot;, alpha = 0.5, show.legend = FALSE) + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.25) plot_grid( my_violin, my_box, my_density, my_bar, labels = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;) ) Figure 3.15: Grid of plots using cowplot {#theme} Once you load the cowplot package, your ggplot default theme will change. You can get back the default ggplot theme with + theme_set(theme_grey()). 3.9 Overlapping Data 3.9.1 Discrete Data You can deal with overlapping data points (very common if you're using Likert scales) by reducing the opacity of the points. You need to use trial and error to adjust these so they look right. ggplot(overlap, aes(x, y)) + geom_point(size = 5, alpha = .05) + geom_smooth(method=&quot;lm&quot;) (#fig:overlap_alpha)Deal with overlapping data using transparency {#geom_count} Or you can set the size of the dot proportional to the number of overlapping observations using geom_count(). overlap %&gt;% ggplot(aes(x, y)) + geom_count(color = &quot;#663399&quot;) (#fig:overlap_size)Deal with overlapping data using geom_count() Alternatively, you can transform your data to create a count column and use the count to set the dot colour. overlap %&gt;% group_by(x, y) %&gt;% summarise(count = n()) %&gt;% ggplot(aes(x, y, color=count)) + geom_point(size = 5) + scale_color_viridis() Figure 3.16: Deal with overlapping data using dot colour 3.9.2 Colours The viridis package changes the colour themes to be easier to read by people with colourblindness and to print better in greyscale. Use scale_color_viridis() to set the colour palette and scale_fill_viridis() to set the fill palette in ggplot. If you need discrete (as opposed to continuous) colours, use scale_color_viridis(discrete=TRUE) or scale_fill_viridis(discrete=TRUE) instead. The newest version of ggplot2 v3.0.0 has viridis built in. It uses scale_colour_viridis_c() and scale_fill_viridis_c() for continuous variables and scale_colour_viridis_d() and scale_fill_viridis_d() for discrete variables. 3.9.3 Continuous Data Even if the variables are continuous, overplotting might obscure any relationships if you have lots of data. overplot %&gt;% ggplot(aes(x, y)) + geom_point() Figure 3.17: Overplotted data {#geom_density2d} Use geom_density2d() to create a contour map. overplot %&gt;% ggplot(aes(x, y)) + geom_density2d() Figure 3.18: Contour map with geom_density2d() You can use stat_density_2d(aes(fill = ..level..), geom = &quot;polygon&quot;) to create a heatmap-style density plot. overplot %&gt;% ggplot(aes(x, y)) + stat_density_2d(aes(fill = ..level..), geom = &quot;polygon&quot;) + scale_fill_viridis() Figure 3.19: Heatmap-density plot {#geom_bin2d} Use geom_bin2d() to create a rectangular heatmap of bin counts. Set the binwidth to the x and y dimensions to capture in each box. overplot %&gt;% ggplot(aes(x, y)) + geom_bin2d(binwidth = c(1,1)) Figure 3.20: Heatmap of bin counts {#geom_hex} Use geomhex() to create a hexagonal heatmap of bin counts. Adjust the binwidth, xlim(), ylim() and/or the figure dimensions to make the hexagons more or less stretched. overplot %&gt;% ggplot(aes(x, y)) + geom_hex(binwidth = c(0.25, 0.25)) Figure 3.21: Hexagonal heatmap of bin counts 3.10 Heat map I've included the code for creating a correlation matrix from a table of variables, but you don't need to understand how this is done yet. We'll cover mutate and gather functions in the dplyr and tidyr lessons. # generate two sets of correlated variables (a and b) heatmap &lt;- tibble( a1 = rnorm(100), b1 = rnorm(100) ) %&gt;% mutate( a2 = a1 + rnorm(100), a3 = a1 + rnorm(100), a4 = a1 + rnorm(100), b2 = b1 + rnorm(100), b3 = b1 + rnorm(100), b4 = b1 + rnorm(100) ) %&gt;% cor() %&gt;% # create the correlation matrix as.data.frame() %&gt;% # make it a data frame rownames_to_column(var = &quot;V1&quot;) %&gt;% # set rownames as V1 gather(&quot;V2&quot;, &quot;r&quot;, a1:b4) # wide to long (V2) Once you have a correlation matrix in the correct (long) format, it's easy to make a heatmap using geom_tile(). ggplot(heatmap, aes(V1, V2, fill=r)) + geom_tile() + scale_fill_viridis() Figure 3.22: Heatmap using geom_tile() The file type is set from the filename suffix, or by specifying the argument device, which can take the following values: &quot;eps&quot;, &quot;ps&quot;, &quot;tex&quot;, &quot;pdf&quot;, &quot;jpeg&quot;, &quot;tiff&quot;, &quot;png&quot;, &quot;bmp&quot;, &quot;svg&quot; or &quot;wmf&quot;. 3.11 Interactive Plots You can use the plotly package to make interactive graphs. Just assign your ggplot to a variable and use the function ggplotly(). demog_plot &lt;- ggplot(pet_happy, aes(pet, happiness, fill=pet)) + geom_point(position = position_jitter(width= 0.2, height = 0), size = 2) ggplotly(demog_plot) Figure 3.23: Interactive graph using plotly Hover over the data points above and click on the legend items. 3.12 Quiz Generate a plot like this from the built-in dataset iris. Make sure to include the custom axis labels. Solution ggplot(iris, aes(Species, Petal.Width, fill = Species)) + geom_boxplot(show.legend = FALSE) + xlab(&quot;Flower Species&quot;) + ylab(&quot;Petal Width (in cm)&quot;) # there are many ways to do things, the code below is also correct ggplot(iris) + geom_boxplot(aes(Species, Petal.Width, fill = Species), show.legend = FALSE) + labs(x = &quot;Flower Species&quot;, y = &quot;Petal Width (in cm)&quot;) You have just created a plot using the following code. How do you save it? ggplot(cars, aes(speed, dist)) + geom_point() + geom_smooth(method = lm) ggsave() ggsave(&quot;figname&quot;) ggsave(&quot;figname.png&quot;) ggsave(&quot;figname.png&quot;, plot = cars) Debug the following code. ggplot(iris) + geom_point(aes(Petal.Width, Petal.Length, colour = Species)) + geom_smooth(method = lm) + facet_grid(Species) Solution ggplot(iris, aes(Petal.Width, Petal.Length, colour = Species)) + geom_point() + geom_smooth(method = lm) + facet_grid(~Species) Generate a plot like this from the built-in dataset ChickWeight. Solution ggplot(ChickWeight, aes(weight, Time)) + geom_hex(binwidth = c(10, 1)) + scale_fill_viridis_c() Generate a plot like this from the built-in dataset iris. Solution pw &lt;- ggplot(iris, aes(Petal.Width, color = Species)) + geom_density() + xlab(&quot;Petal Width (in cm)&quot;) pl &lt;- ggplot(iris, aes(Petal.Length, color = Species)) + geom_density() + xlab(&quot;Petal Length (in cm)&quot;) + coord_flip() pw_pl &lt;- ggplot(iris, aes(Petal.Width, Petal.Length, color = Species)) + geom_point() + geom_smooth(method = lm) + xlab(&quot;Petal Width (in cm)&quot;) + ylab(&quot;Petal Length (in cm)&quot;) cowplot::plot_grid( pw, pl, pw_pl, labels = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), nrow = 3 ) 3.13 Exercises Download the formative exercises. See the answer demo to see what your plots should look like (this doesn't contain the answer code). 3.13.1 Common Plots Generate a violin plot, boxplot, histogram, density plot, and column plot for the following data. # dog weights estimated from http://petobesityprevention.org/ideal-weight-ranges/ dogs &lt;- tibble( breed = rep(c(&quot;beagle&quot;, &quot;boxer&quot;, &quot;bulldog&quot;), each = 100), weight = c( rnorm(100, 24, 6), rnorm(100, 62.5, 12.5), rnorm(100, 45, 5) ) ) Basic: Create each plot. Intermediate: Change the axis labels and colours. Save each plot as a PNG file. Advanced: Create a grid of the first four plot styles (exclude the column plot). In your RMarkdown file, display just the graph, but not the r code for the graph. 3.13.2 Two continuous variables Represent the relationships among moral, sexual and pathogen disgust scores from the dataset disgust_scores.csv. Basic: Graph the linear relationship between moral and pathogen disgust. Make sure the axes run from the minimum to maximum possible scores on both axes. Give the graph an appropriate title and axis lables. Intermediate: Create a 2d density plot of the relationship between pathogen and sexual disgust. Use stat_density_2d(aes(fill = ..level..), geom = &quot;polygon&quot;, n = ?, h = c(?, ?)), set n and h to values that make the graph look good, and figure out what n and h represent. Advanced: Create a 3x3 grid of plots with columns representing the x-axis and rows representing the y-axis. Put a density plot of each variable along the diagonal. Make sure the graphs have appropriate titles and axis labels and that the range of the axes are the same in all graphs. moral sexual pathogen moral density line line sexual line density line pathogen line line density 3.13.3 Many correlated variables Basic: Create a heatmap of the relationships among all the questions in disgust_cors.csv (the correlations have already been calculated for you). Intermediate: Figure out how to rotate the text on the x-axis so it's readable. "]
]
